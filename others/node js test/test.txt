1.Explain closures with a nodejs example 

2.build a webpage that has the folliwng feilds  - Firsta name , last name, occupation , position, county , city , zip code, telephone . Build a API that reads data from local json file and send it back to the browser evertime this api is called. 

3.write a error first callback example 

4.explain nodejs event loop using an code example fully expalining the  event loop 

5.explain the use of process object 

6.explain cluster object with an example 

7.explain worker object with an example 

8.Explain how many types of streams are present in nodejs with examples 


1.personclass.js

function person(name,live){
this.message = name +",who lives in"+live+"hello everyOne";
};
person.prototype.greet = function greet(){
console.log(this.message);
};
person.prototype.slowGreet = function slowgreet(){
var self = this;
setTimeout(function(){
console.log(self.message);
},1000);
};
module.exports = person;

useclass.js

var me = require('./personclass');
var myobj = new me("Aayush kumar","new delhi");
myobj.greet();
myobj.slowgreet();

3.function fib(n,callback){
 try{
     if(n<1){
         throw new Error ("you should enter any positive integer greather than 1 ");
     }
     else {
         callback(null,function(){
             var a=[];
             x=1,y=0;
             for(i=0;i<n;i++){
                 var sum=x+y;
                 a.push(y);
                 y=x;
                 x=sum;
             }
             return a;
         });
     }
 } 
catch(error){
    callback(error,null);
   }
}

function solvefib(n){
    fib(n,function(err,arr){
        if(err){
            console.log(err);
        }
        else{
            console.log(arr(n));
        }
    });
}
 solvefib(6);



4.
var name="Aayush";
var place="new delhi";
app.get('/showdata',function(req,res){
res.send(name+"is from"+place);
})
console.log("I will be executed without waiting for readFile");
console.log("end");

o/p:
I will be executed without waiting for readFile
end
Aayush is from new delhi

8.Readable 
var http = require('http');
var fs = require('fs');

var myReadStream = fs.createReadStream(__dirname + '/readme.txt','utf8');

myReadStream.on('data',function(chunk){
    console.log('new chunk received');
    console.log(chunk);
});

Writable 
var http = require('http');
var fs = require('fs');

var myReadStream = fs.createReadStream(__dirname + '/readme.txt','utf8');
var myWriteStream = fs.createWriteStream(__dirname + '/writeme.txt');

myReadStream.on('data',function(chunk){
    console.log('new chunk received');
    myWriteStream.write(chunk);
});

Duplex(pipe)
var http=require('http');
var fs = require('fs');
 
var server = http.createServer(function(req,res){
console.log('request was made at:' + req.url);
res.writeHead(200,{'Content-Type':'text/plain'});
    
var myReadStream = fs.createReadStream(__dirname + '/readme.txt','utf8');
myReadStream.pipe(res);
});

server.listen(3000,'127.0.0.1');//port,address
console.log('serever now runnining at port 3000');

Transform 
var fs = require("fs");
var zlib = require('zlib');

fs.createReadStream('input.txt')
   .pipe(zlib.createGzip())
   .pipe(fs.createWriteStream('input.txt.gz'));
  
console.log("File Compressed.");

5.The process object is the global object in Node. It can be accessed from anywhere; it is an instance of  EventEmitter. Each Node.js has a set of built-in functionality, accessible through the global process object. The process object provides the standard input/output (stdio) streams stdin, stdout and stderr (as in C/C++) as in the following:

stdin: a readable stream for reading input from the user.
stdout: a writable stream, either synchrously or asynchronously.
stderr: a blocking synchronous writable stream intended for error messages.

console.log("this process title is:"+process.title);
console.log("this process ID is:"+process.pid);
console.log("this process version is:"+process.version);
console.log("this process platform is:"+process.platfrom);

var msg = 'hello';
process.stdout.write(msg+'\n');

var fs=require('fs');
fs.createReadStream(__filename).pipe(process.stdout);

6.Clustering in Node.js allows you to create separate processes which can share same server port.For example, if we run one HTTP server on Port 3000, it is one Server running on Single thread on a single core of the processor.

But I want to take advantage of all core available in my machine. So I will cluster my application and run them on all cores. So if I run one server on Port 3000 by having 4 core of processor then actually I am running 4 servers all are listening to Port 3000.

So if one server goes down then other is there to take the place of it, also in peak load of traffic, Node will automatically allocate the worker to particular process so basically it does internal load balancing very efficiently.

var cluster = require('cluster');
var express = require('express');
var app =express();


if(cluster.isMaster){
    var numWorkers = require('os').cpus().length;
   console.log('Master cluster setting up '+numWorkers+' workers...');

   for(var i=0;i<numWorkers;i++){
       cluster.fork();
   }
   cluster.on('online',function(worker){
       console.log('Worker '+worker.process.pid+' is online');
   });
   cluster.on('exit',function(worker,code,signal){
       console.log('worker '+worker.process.pid+' died with code:'+code+'signal');
       console.log('starting a new worker');
       cluster.fork();      
   });
}else{
    
    app.all('/*',function(req,res){
        res.send('process '+process.pid+' says hello!').end()
    });
    var server = app.listen(3000,function(){
     console.log('Process '+process.pid+' is listening to all incoming request');
    });
}

7.let workers = [];

function masterProcess() {
  console.log(`Master ${process.pid} is running`);

  // Fork workers
  for (let i = 0; i < numCPUs; i++) {
    console.log(`Forking process number ${i}...`);

    const worker = cluster.fork();
    workers.push(worker);

    // Listen for messages from worker
    worker.on('message', function(message) {
      console.log(`Master ${process.pid} recevies message '${JSON.stringify(message)}' from worker ${worker.process.pid}`);
    });
  }

  // Send message to the workers
  workers.forEach(function(worker) {
    console.log(`Master ${process.pid} sends message to worker ${worker.process.pid}...`);
    worker.send({ msg: `Message from master ${process.pid}` });    
  }, this);
}